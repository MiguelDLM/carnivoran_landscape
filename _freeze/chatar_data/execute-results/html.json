{
  "hash": "d8f94911399bb7da5931765676b08e4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Carnivoran jaws available\"\nauthor: \"E. Miguel Díaz de León-Muñoz\"\ndate: \"2025-09-02\"\nformat:\n  html:\n    theme: cosmo\n    toc: false\n    code-fold: true\n    page-layout: full\nexecute:\n  echo: true\n  warning: false\n  eval: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#load RData\nload(\"PBDB_carnivora_env.RData\")\n```\n:::\n\n\n\n# Interactive Sunburst Chart\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Interactive sunburst chart (3-level): Root > Family > Availability > Extant Status\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(htmltools)\n\n# Prepare data for sunburst: ensure we have the columns and clean values\nmandibles_dataset <- mandibles_dataset %>%\n  mutate(\n    family = ifelse(!is.null(family.y) & !is.na(family.y) & family.y != \"\", as.character(family.y), \"Unknown\"),\n    availability = ifelse(is.na(availability) | availability == \"\", \"No Data\", \n                         ifelse(availability == \"Chatar\", \"Chatar\", \"No Data\")),\n    is_extant = ifelse(is.na(is_extant) | is_extant == \"\", \"Unknown\", as.character(is_extant))\n  )\n\n# Build hierarchical data structure for sunburst\n# Level 1: Root (center)\n# Level 2: Families \n# Level 3: Availability within families\n# Level 4: Extant status within availability\n\n# Count species at each level\nspecies_counts <- mandibles_dataset %>%\n  group_by(family, availability, is_extant) %>%\n  summarise(n_species = n_distinct(accepted_name), .groups = \"drop\") %>%\n  filter(n_species > 0)\n\n# Create sunburst data structure\n## Build sunburst nodes with unique ids to avoid collisions\nsafe_id <- function(x) gsub(\"[^A-Za-z0-9_:-]\", \"_\", x)\n\nsunburst_data <- tibble(ids=character(), labels=character(), parents=character(), values=numeric(), colors=character())\n\n# Root node\nsunburst_data <- sunburst_data %>% add_row(ids = \"root::Carnivora\", labels = \"Carnivora\", parents = \"\", values = sum(species_counts$n_species), colors = \"#CCCCCC\")\n\n# Family nodes\nfamily_data <- species_counts %>% group_by(family) %>% summarise(total_species = sum(n_species), .groups = \"drop\") %>% arrange(desc(total_species))\nfor(i in seq_len(nrow(family_data))) {\n  fam <- family_data$family[i]\n  fam_id <- paste0(\"fam::\", safe_id(fam))\n  total_sp <- family_data$total_species[i]\n  sunburst_data <- sunburst_data %>% add_row(ids = fam_id, labels = paste0(fam, \"<br>(\", total_sp, \" spp)\"), parents = \"root::Carnivora\", values = total_sp, colors = \"#888888\")\n}\n\n# Availability nodes\navail_data <- species_counts %>% group_by(family, availability) %>% summarise(total_species = sum(n_species), .groups = \"drop\")\nfor(i in seq_len(nrow(avail_data))) {\n  fam <- avail_data$family[i]\n  fam_id <- paste0(\"fam::\", safe_id(fam))\n  avail <- avail_data$availability[i]\n  avail_id <- paste0(fam_id, \"::avail::\", safe_id(avail))\n  total_sp <- avail_data$total_species[i]\n  color <- ifelse(avail == \"Chatar\", \"#228B22\", \"#DC143C\")\n  sunburst_data <- sunburst_data %>% add_row(ids = avail_id, labels = paste0(avail, \"<br>(\", total_sp, \" spp)\"), parents = fam_id, values = total_sp, colors = color)\n}\n\n# Extant status (leaf) nodes\nfor(i in seq_len(nrow(species_counts))) {\n  fam <- species_counts$family[i]\n  fam_id <- paste0(\"fam::\", safe_id(fam))\n  avail <- species_counts$availability[i]\n  avail_id <- paste0(fam_id, \"::avail::\", safe_id(avail))\n  extant <- species_counts$is_extant[i]\n  node_id <- paste0(avail_id, \"::\", safe_id(extant))\n  n_sp <- species_counts$n_species[i]\n  color <- ifelse(extant == \"extant\", \"#4169E1\", ifelse(extant == \"extinct\", \"#FFD700\", \"#D3D3D3\"))\n  sunburst_data <- sunburst_data %>% add_row(ids = node_id, labels = paste0(extant, \"<br>(\", n_sp, \" spp)\"), parents = avail_id, values = n_sp, colors = color)\n}\n\n# Sanity checks\nif(any(duplicated(sunburst_data$ids))) stop(\"Duplicate ids detected in sunburst_data; aborting\")\n\n# Create interactive sunburst chart and pass marker colors explicitly\nfig <- plot_ly(\n  type = \"sunburst\",\n  ids = sunburst_data$ids,\n  labels = sunburst_data$labels,\n  parents = sunburst_data$parents,\n  values = sunburst_data$values,\n  branchvalues = \"total\",\n  marker = list(colors = sunburst_data$colors),\n  hovertemplate = \"<b>%{label}</b><br>Species: %{value}<br>Percentage: %{percentParent}<extra></extra>\",\n  maxdepth = 4,\n  insidetextorientation = 'radial'\n)\nfig <- fig %>% layout(\n  title = list(text = \"Interactive Carnivoran Species Distribution\", font = list(size = 16)), \n  font = list(size = 12), \n  margin = list(t = 50, l = 0, r = 0, b = 0),\n  height = 900,  # Set explicit height to override the default 400px\n  width = NULL   # Let width be responsive\n)\n\n# Make plotly responsive \nfig <- fig %>% config(responsive = TRUE)\n\n# Wrap in a div that uses viewport height to ensure proper display\nhtmltools::div(style = \"width:100%; height:80vh; min-height:900px;\", fig)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}